autolayer(model_holtwin2$fitted[,1], series = "fitted_ets")+
autolayer(close_holtwin_f3$mean, series = "forecast_ets")
gkg_train %>%
autoplot()+
autolayer(gkg_test, series = "test")+
autolayer(model_holtwin2$fitted[,1], series = "fitted_ets")+
autolayer(close_holtwin_f3$mean, series = "forecast_ets")
close_holtwin_f3 <- forecast(model_holtwin2, h = 24)
gkg_train %>%
autoplot()+
autolayer(gkg_test, series = "test")+
autolayer(model_holtwin2$fitted[,1], series = "fitted_ets")+
autolayer(close_holtwin_f3$mean, series = "forecast_ets")
gkg_train %>%
autoplot()+
autolayer(gkg_test, series = "test")+
autolayer(model_holtwin2$fitted[,1], series = "fitted_ets")+
autolayer(close_holtwin_f3$mean, series = "forecast_ets")
close_holtwin_f3 <- forecast(close_arima, h = 24)
gkg_train %>%
autoplot()+
autolayer(gkg_test, series = "test")+
autolayer(model_holtwin2$fitted[,1], series = "fitted_ets")+
autolayer(close_holtwin_f3$mean, series = "forecast_ets")
close_holtwin_f3 <- forecast(model_holtwin, h = 24)
gkg_train %>%
autoplot()+
autolayer(gkg_test, series = "test")+
autolayer(model_holtwin2$fitted[,1], series = "fitted_ets")+
autolayer(close_holtwin_f3$mean, series = "forecast_ets")
close_holtwin_f3 <- forecast(model_holtwin2, h = 24)
gkg_train %>%
autoplot()+
autolayer(gkg_test, series = "test")+
autolayer(model_holtwin2$fitted[,1], series = "fitted_ets")+
autolayer(close_holtwin_f3$mean, series = "forecast_ets")
ggplotly(tes)
library(plotly)
ggplotly(tes)
tes <- gkg_train %>%
autoplot()+
autolayer(gkg_test, series = "test")+
autolayer(model_holtwin2$fitted[,1], series = "fitted_ets")+
autolayer(close_holtwin_f3$mean, series = "forecast_ets")
library(plotly)
ggplotly(tes)
gkg <- read.csv("Produksi Gabah Kering Giling.csv")
rmarkdown::paged_table(gkg)
# Mengurutkan Tahun
gkg <- gkg %>%
dplyr::arrange(Tahun)
# Menampilkan informasi dari setiap kolom
glimpse(gkg)
anyNA(gkg)
gkg_ts <- ts(data = gkg$Produksi_Beras,
start = 1993,
frequency = 3)
autoplot(gkg_ts)
# decompose
gkg_ts %>%
stats::decompose() %>%
autoplot()
gkg_train <- head(gkg_ts, n = length(gkg_ts) - 6)
gkg_test <- tail(gkg_ts, n = 6)
length(gkg_train)
length(gkg_test)
# SARIMA
close_arima <- stlm(gkg_train, method = "arima")
# Holt-Winters
model_holtwin <- HoltWinters(x = gkg_train, seasonal = "additive")
# forecasting model arima
close_arima_f <- forecast(close_arima, h = 6)
# forecasting model holtwinters
close_holtwin_f <- forecast(model_holtwin, h = 6)
# cara visualisasi lain: perbandingan prediksi dan aktual
test_forecast(actual = gkg_ts, # data aktual full
forecast.obj = close_arima_f, # hasil forecast
test = gkg_test) # data test
autoplot(gkg_ts) +
autolayer(close_arima_f)
# cara visualisasi lain: perbandingan prediksi dan aktual
test_forecast(actual = gkg_ts, # data aktual full
forecast.obj = close_holtwin_f, # hasil forecast
test = gkg_test) # data test
autoplot(gkg_ts) +
autolayer(close_holtwin_f)
MAE(close_arima_f$mean, gkg_test)
MAE(close_holtwin_f$mean, gkg_test)
model_holtwin
model_holtwin2 <- HoltWinters(x = gkg_train, beta = 0.3, gamma = 0.2)
close_holtwin_f2 <- forecast(model_holtwin2, h = 6)
model_holtwin2
# cara visualisasi lain: perbandingan prediksi dan aktual
test_forecast(actual = gkg_ts, # data aktual full
forecast.obj = close_holtwin_f2, # hasil forecast
test = gkg_test) # data test
MAE(close_holtwin_f2$mean, gkg_test)
range(gkg$Produksi_Ton)[2] - range(gkg$Produksi_Ton)[1]
range(gkg$Produksi_Beras)[2] - range(gkg$Produksi_Beras)[1]
close_holtwin_f3 <- forecast(model_holtwin2, h = 24)
tes <- gkg_train %>%
autoplot()+
autolayer(gkg_test, series = "test")+
autolayer(model_holtwin2$fitted[,1], series = "fitted_ets")+
autolayer(close_holtwin_f3$mean, series = "forecast_ets")
library(plotly)
ggplotly(tes)
konsumsi <- ts(gkg$Total_Konsumsi_Beras,
start = 2010,
frequency = 3)
tes <- gkg_train %>%
autoplot()+
autolayer(gkg_test, series = "test")+
autolayer(konsumsi, series = "test")+
autolayer(model_holtwin2$fitted[,1], series = "fitted_ets")+
autolayer(close_holtwin_f3$mean, series = "forecast_ets")
library(plotly)
ggplotly(tes)
tes <- gkg_train %>%
autoplot()+
autolayer(gkg_test, series = "test")+
autolayer(model_holtwin2$fitted[,1], series = "fitted_ets")+
autolayer(close_holtwin_f3$mean, series = "forecast_ets")
library(plotly)
ggplotly(tes)
gkg_ts <- ts(data = gkg$Produksi_Beras,
start = 1993,
end = 2018,
frequency = 3)
autoplot(gkg_ts)
gkg_ts <- ts(data = gkg$Produksi_Beras,
start = 1993,
end = 2018,
frequency = 1)
autoplot(gkg_ts)
gkg_ts <- ts(data = gkg$Produksi_Beras,
start = 1993,
end = 2018,
frequency = 2)
autoplot(gkg_ts)
gkg_ts <- ts(data = gkg$Produksi_Beras,
start = 1993,
end = 2018,
frequency = 1)
autoplot(gkg_ts)
# decompose
gkg_ts %>%
stats::decompose() %>%
autoplot()
gkg_ts <- ts(data = gkg$Produksi_Beras,
start = 1993,
end = 2018,
frequency = 3)
autoplot(gkg_ts)
gkg_ts
gkg_ts <- ts(data = gkg$Produksi_Beras,
start = 1993,
end = 2018,
frequency = 3)
autoplot(gkg_ts)
# decompose
gkg_ts %>%
stats::decompose() %>%
autoplot()
gkg_ts <- ts(data = gkg$Produksi_Beras,
start = 1993,
end = 2018,
frequency = 1)
autoplot(gkg_ts)
gkg_ts <- ts(data = gkg$Produksi_Beras,
start = 1993,
frequency = 1)
autoplot(gkg_ts)
gkg_ts <- ts(data = gkg$Produksi_Beras,
start = 1993,
frequency = 1)
autoplot(gkg_ts)
# decompose
gkg_ts %>%
stats::decompose() %>%
autoplot()
gkg_ts <- ts(data = gkg$Produksi_Beras,
start = 1993,
frequency = 3)
autoplot(gkg_ts)
konsumsi <- ts(gkg$Total_Konsumsi_Beras,
start = 1993,
frequency = 3)
tes <- gkg_train %>%
autoplot()+
autolayer(gkg_test, series = "test")+
autolayer(konsumsi, series = "test")+
autolayer(model_holtwin2$fitted[,1], series = "fitted_ets")+
autolayer(close_holtwin_f3$mean, series = "forecast_ets")
library(plotly)
ggplotly(tes)
tes <- gkg_train %>%
autoplot()+
autolayer(gkg_test, series = "test")+
autolayer(konsumsi, series = "test")+
autolayer(model_holtwin2$fitted[,1], series = "fitted_ets")+
autolayer(close_holtwin_f2$mean, series = "forecast_ets")
library(plotly)
ggplotly(tes)
tes <- gkg_train %>%
autoplot()+
autolayer(gkg_test, series = "test")+
autolayer(konsumsi, series = "konsumsi")+
autolayer(model_holtwin2$fitted[,1], series = "fitted_ets")+
autolayer(close_holtwin_f2$mean, series = "forecast_ets")
library(plotly)
ggplotly(tes)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(forecast)
library(tseries)
library(dplyr)
library(MLmetrics)
library(TSstudio)
gkg <- read.csv("Produksi Gabah Kering Giling.csv")
rmarkdown::paged_table(gkg)
# Mengurutkan Tahun
gkg <- gkg %>%
dplyr::arrange(Tahun)
# Menampilkan informasi dari setiap kolom
glimpse(gkg)
anyNA(gkg)
gkg_ts <- ts(data = gkg$Produksi_Beras,
start = 1993,
frequency = 3)
autoplot(gkg_ts)
# decompose
gkg_ts %>%
stats::decompose() %>%
autoplot()
gkg_train <- head(gkg_ts, n = length(gkg_ts) - 6)
gkg_test <- tail(gkg_ts, n = 6)
length(gkg_train)
length(gkg_test)
# SARIMA
close_arima <- stlm(gkg_train, method = "arima")
# Holt-Winters
model_holtwin <- HoltWinters(x = gkg_train, seasonal = "additive")
# forecasting model arima
close_arima_f <- forecast(close_arima, h = 6)
# forecasting model holtwinters
close_holtwin_f <- forecast(model_holtwin, h = 6)
# cara visualisasi lain: perbandingan prediksi dan aktual
test_forecast(actual = gkg_ts, # data aktual full
forecast.obj = close_arima_f, # hasil forecast
test = gkg_test) # data test
autoplot(gkg_ts) +
autolayer(close_arima_f)
# cara visualisasi lain: perbandingan prediksi dan aktual
test_forecast(actual = gkg_ts, # data aktual full
forecast.obj = close_holtwin_f, # hasil forecast
test = gkg_test) # data test
autoplot(gkg_ts) +
autolayer(close_holtwin_f)
MAE(close_arima_f$mean, gkg_test)
MAE(close_holtwin_f$mean, gkg_test)
model_holtwin
model_holtwin2 <- HoltWinters(x = gkg_train, beta = 0.3, gamma = 0.2)
close_holtwin_f2 <- forecast(model_holtwin2, h = 6)
model_holtwin2
# cara visualisasi lain: perbandingan prediksi dan aktual
test_forecast(actual = gkg_ts, # data aktual full
forecast.obj = close_holtwin_f2, # hasil forecast
test = gkg_test) # data test
MAE(close_holtwin_f2$mean, gkg_test)
range(gkg$Produksi_Beras)[2] - range(gkg$Produksi_Beras)[1]
konsumsi <- ts(gkg$Total_Konsumsi_Beras,
start = 1993,
frequency = 3)
close_holtwin_f3 <- forecast(model_holtwin2, h = 24)
close_holtwin_f3 <- forecast(model_holtwin2, h = 24)
tes <- gkg_train %>%
autoplot()+
autolayer(gkg_test, series = "test")+
autolayer(konsumsi, series = "konsumsi")+
autolayer(model_holtwin2$fitted[,1], series = "fitted_ets")+
autolayer(close_holtwin_f2$mean, series = "forecast_ets")
library(plotly)
ggplotly(tes)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(forecast)
library(tseries)
library(dplyr)
library(MLmetrics)
library(TSstudio)
gkg <- read.csv("Produksi Gabah Kering Giling.csv")
rmarkdown::paged_table(gkg)
# Mengurutkan Tahun
gkg <- gkg %>%
dplyr::arrange(Tahun)
# Menampilkan informasi dari setiap kolom
glimpse(gkg)
anyNA(gkg)
gkg_ts <- ts(data = gkg$Produksi_Beras,
start = 1993,
frequency = 3)
autoplot(gkg_ts)
# decompose
gkg_ts %>%
stats::decompose() %>%
autoplot()
gkg_train <- head(gkg_ts, n = length(gkg_ts) - 6)
gkg_test <- tail(gkg_ts, n = 6)
length(gkg_train)
length(gkg_test)
# SARIMA
close_arima <- stlm(gkg_train, method = "arima")
# Holt-Winters
model_holtwin <- HoltWinters(x = gkg_train, seasonal = "additive")
# forecasting model arima
close_arima_f <- forecast(close_arima, h = 6)
# forecasting model holtwinters
close_holtwin_f <- forecast(model_holtwin, h = 6)
# cara visualisasi lain: perbandingan prediksi dan aktual
test_forecast(actual = gkg_ts, # data aktual full
forecast.obj = close_arima_f, # hasil forecast
test = gkg_test) # data test
autoplot(gkg_ts) +
autolayer(close_arima_f)
# cara visualisasi lain: perbandingan prediksi dan aktual
test_forecast(actual = gkg_ts, # data aktual full
forecast.obj = close_holtwin_f, # hasil forecast
test = gkg_test) # data test
autoplot(gkg_ts) +
autolayer(close_holtwin_f)
MAE(close_arima_f$mean, gkg_test)
MAE(close_holtwin_f$mean, gkg_test)
model_holtwin
model_holtwin2 <- HoltWinters(x = gkg_train, beta = 0.3, gamma = 0.2)
close_holtwin_f2 <- forecast(model_holtwin2, h = 6)
model_holtwin2
# cara visualisasi lain: perbandingan prediksi dan aktual
test_forecast(actual = gkg_ts, # data aktual full
forecast.obj = close_holtwin_f2, # hasil forecast
test = gkg_test) # data test
MAE(close_holtwin_f2$mean, gkg_test)
range(gkg$Produksi_Beras)[2] - range(gkg$Produksi_Beras)[1]
konsumsi <- ts(gkg$Total_Konsumsi_Beras,
start = 1993,
frequency = 3)
close_holtwin_f3 <- forecast(model_holtwin2, h = 24)
tes <- gkg_train %>%
autoplot()+
autolayer(gkg_test, series = "test")+
autolayer(konsumsi, series = "konsumsi")+
autolayer(model_holtwin2$fitted[,1], series = "fitted_ets")+
autolayer(close_holtwin_f2$mean, series = "forecast_ets")
library(plotly)
ggplotly(tes)
shapiro.test(close_holtwin_f2$residuals) # p-value < 0.05 maka H1
Box.test(close_holtwin_f2$residuals, type = "Ljung-Box")
hist(close_holtwin_f2$residuals)
konsumsi <- ts(gkg$Total_Konsumsi_Beras,
start = 1993,
frequency = 3)
tes <- gkg_train %>%
autoplot()+
autolayer(gkg_test, series = "test")+
autolayer(konsumsi, series = "konsumsi")+
autolayer(model_holtwin2$fitted[,1], series = "fitted_ets")+
autolayer(close_holtwin_f2$mean, series = "forecast_ets")
library(plotly)
ggplotly(tes)
model_holtwin_konsumsi <- HoltWinters(x = konsumsi, seasonal = "additive")
model_holtwin_konsumsi <- HoltWinters(x = konsumsi, seasonal = "additive")
konsumsi_holtwin_f <- forecast(model_holtwin_konsumsi, h = 6)
close_holtwin_f3 <- forecast(model_holtwin, h = 3)
model_holtwin_konsumsi <- HoltWinters(x = konsumsi, seasonal = "additive")
konsumsi_holtwin_f <- forecast(model_holtwin_konsumsi, h = 6)
close_holtwin_f3 <- forecast(model_holtwin, h = 12)
tes <- gkg_train %>%
autoplot()+
autolayer(gkg_test, series = "test")+
autolayer(konsumsi_holtwin_f, series = "konsumsi")+
autolayer(model_holtwin2$fitted[,1], series = "fitted_ets")+
autolayer(close_holtwin_f3$mean, series = "forecast_ets")
library(plotly)
ggplotly(tes)
konsumsi_holtwin_f
tes <- gkg_train %>%
autoplot()+
autolayer(gkg_test, series = "test")+
autolayer(konsumsi, series = "konsumsi")+
autolayer(model_holtwin2$fitted[,1], series = "fitted_ets")+
autolayer(close_holtwin_f3$mean, series = "forecast_ets")
library(plotly)
ggplotly(tes)
tes <- gkg_train %>%
autoplot()+
autolayer(gkg_test, series = "test")+
autolayer(konsumsi, series = "konsumsi") +
autolayer(konsumsi_holtwin_f$mean, series = "konsumsi forecast") +
autolayer(model_holtwin2$fitted[,1], series = "fitted_ets")+
autolayer(close_holtwin_f3$mean, series = "forecast_ets")
library(plotly)
ggplotly(tes)
model_holtwin_konsumsi <- HoltWinters(x = konsumsi, seasonal = "additive")
konsumsi_holtwin_f <- forecast(model_holtwin_konsumsi, h = 6)
close_holtwin_f3 <- forecast(model_holtwin2, h = 12)
tes <- gkg_train %>%
autoplot()+
autolayer(gkg_test, series = "test")+
autolayer(konsumsi, series = "konsumsi") +
autolayer(konsumsi_holtwin_f$mean, series = "konsumsi forecast") +
autolayer(model_holtwin2$fitted[,1], series = "fitted_ets")+
autolayer(close_holtwin_f3$mean, series = "forecast_ets")
library(plotly)
ggplotly(tes)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(forecast)
library(tseries)
library(dplyr)
library(MLmetrics)
library(TSstudio)
beras <- read.csv("Produksi Gabah Kering Giling.csv")
rmarkdown::paged_table(beras)
# Mengurutkan Tahun
beras <- beras %>%
dplyr::arrange(Tahun)
# Menampilkan informasi dari setiap kolom
glimpse(beras)
anyNA(beras)
beras_ts <- ts(data = beras$Produksi_Beras,
start = 1993,
frequency = 3)
autoplot(beras_ts)
# decompose
beras_ts %>%
stats::decompose() %>%
autoplot()
beras_train <- head(beras_ts, n = length(beras_ts) - 6)
beras_test <- tail(beras_ts, n = 6)
length(beras_train)
length(beras_test)
# SARIMA
close_arima <- stlm(beras_train, method = "arima")
# Holt-Winters
model_holtwin <- HoltWinters(x = beras_train, seasonal = "additive")
# forecasting model arima
close_arima_f <- forecast(close_arima, h = 6)
# forecasting model holtwinters
close_holtwin_f <- forecast(model_holtwin, h = 6)
# cara visualisasi lain: perbandingan prediksi dan aktual
test_forecast(actual = beras_ts, # data aktual full
forecast.obj = close_arima_f, # hasil forecast
test = beras_test) # data test
autoplot(beras_ts) +
autolayer(close_arima_f)
# cara visualisasi lain: perbandingan prediksi dan aktual
test_forecast(actual = beras_ts, # data aktual full
forecast.obj = close_holtwin_f, # hasil forecast
test = beras_test) # data test
autoplot(beras_ts) +
autolayer(close_holtwin_f)
MAE(close_arima_f$mean, beras_test)
MAE(close_holtwin_f$mean, beras_test)
model_holtwin
model_holtwin2 <- HoltWinters(x = beras_train, beta = 0.3, gamma = 0.2)
close_holtwin_f2 <- forecast(model_holtwin2, h = 6)
model_holtwin2
# cara visualisasi lain: perbandingan prediksi dan aktual
test_forecast(actual = beras_ts, # data aktual full
forecast.obj = close_holtwin_f2, # hasil forecast
test = beras_test) # data test
MAE(close_holtwin_f2$mean, beras_test)
range(beras$Produksi_Beras)[2] - range(beras$Produksi_Beras)[1]
shapiro.test(close_holtwin_f2$residuals) # p-value < 0.05 maka H1
Box.test(close_holtwin_f2$residuals, type = "Ljung-Box")
hist(close_holtwin_f2$residuals)
konsumsi <- ts(beras$Total_Konsumsi_Beras,
start = 1993,
frequency = 3)
model_holtwin_konsumsi <- HoltWinters(x = konsumsi, seasonal = "additive")
konsumsi_holtwin_f <- forecast(model_holtwin_konsumsi, h = 6)
close_holtwin_f3 <- forecast(model_holtwin2, h = 12)
tes <- beras_train %>%
autoplot()+
autolayer(beras_test, series = "test")+
autolayer(konsumsi, series = "konsumsi") +
autolayer(konsumsi_holtwin_f$mean, series = "konsumsi forecast") +
autolayer(model_holtwin2$fitted[,1], series = "fitted_ets")+
autolayer(close_holtwin_f3$mean, series = "forecast_ets")
library(plotly)
ggplotly(tes)
tes <- beras_train %>%
autoplot()+
autolayer(beras_test, series = "test")+
autolayer(konsumsi, series = "konsumsi") +
autolayer(konsumsi_holtwin_f$mean, series = "konsumsi forecast") +
autolayer(model_holtwin2$fitted[,1], series = "fitted_ets")+
autolayer(close_holtwin_f3$mean, series = "forecast_ets")
library(plotly)
ggplotly(tes);
library(ggplot2)
library(forecast)
library(tseries)
library(dplyr)
library(MLmetrics)
library(TSstudio)
library(plotly)
# cara visualisasi lain: perbandingan prediksi dan aktual
test_forecast(actual = beras_ts, # data aktual full
forecast.obj = close_arima_f, # hasil forecast
test = beras_test); # data test
knitr::include_graphics("padi.jpeg")
